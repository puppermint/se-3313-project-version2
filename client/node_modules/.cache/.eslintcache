[{"C:\\Users\\Magnus Reeves\\Desktop\\3313\\SE-3313-project-2\\client\\src\\index.js":"1","C:\\Users\\Magnus Reeves\\Desktop\\3313\\SE-3313-project-2\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Magnus Reeves\\Desktop\\3313\\SE-3313-project-2\\client\\src\\Home.js":"3","C:\\Users\\Magnus Reeves\\Desktop\\3313\\SE-3313-project-2\\client\\src\\LogIn.js":"4","C:\\Users\\Magnus Reeves\\Desktop\\3313\\SE-3313-project-2\\client\\src\\App.js":"5"},{"size":502,"mtime":1638318245760,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1638311793817,"results":"8","hashOfConfig":"7"},{"size":1302,"mtime":1638543226850,"results":"9","hashOfConfig":"7"},{"size":1906,"mtime":1638402574355,"results":"10","hashOfConfig":"7"},{"size":3866,"mtime":1638496497897,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"umcj62",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"C:\\Users\\Magnus Reeves\\Desktop\\3313\\SE-3313-project-2\\client\\src\\index.js",[],"C:\\Users\\Magnus Reeves\\Desktop\\3313\\SE-3313-project-2\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Magnus Reeves\\Desktop\\3313\\SE-3313-project-2\\client\\src\\Home.js",[],"C:\\Users\\Magnus Reeves\\Desktop\\3313\\SE-3313-project-2\\client\\src\\LogIn.js",[],"C:\\Users\\Magnus Reeves\\Desktop\\3313\\SE-3313-project-2\\client\\src\\App.js",["23"],"import './App.css';\r\nimport React from 'react';\r\n\r\nfunction Message(props){ //function for the client message\r\n    let messagesHTML = []; \r\n    console.log(props.messages)\r\n    for(let j = 0; j < props.messages.length; j++){ \r\n        let containerCss;\r\n\r\n        if(props.messages[j].name === props.name){ //what side the message is on\r\n            containerCss = \"containerLeft\"\r\n        }\r\n        else{\r\n            containerCss = \"containerRight\"\r\n        }\r\n\r\n        //defining the HTML for the message\r\n        messagesHTML[j] = <div className = {containerCss}>\r\n                            <div className = \"message\">\r\n                                <p>{props.messages[j].message}</p>\r\n                                <span className = \"UserName\"> {props.messages[j].name} </span>\r\n                            </div>\r\n                    </div>\r\n    }\r\n    \r\n    //return the message\r\n    return (<div className = \"board\"> \r\n               {messagesHTML}\r\n           </div> \r\n    )\r\n}\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        \r\n        this.state = { //defines the current state\r\n            socket: props.socket,\r\n            messages: new Array(),\r\n            isLoggedIn: false,\r\n            message: '',\r\n            name: props.data.name,\r\n            roomNum: null\r\n        }\r\n\r\n        console.log(this.state.messages)\r\n\r\n        this.SendMessage = this.SendMessage.bind(this)\r\n        this.InputOnChange = this.InputOnChange.bind(this)\r\n    }\r\n\r\n    InputOnChange(event){ //set message to the event value\r\n        this.setState({\r\n            message: event.target.value,\r\n        })     \r\n    }\r\n\r\n    SendMessage(){ //send the message with the required values in the state\r\n        console.log(\"sending message\")\r\n        this.state.socket.emit('SendMessage', ({message: this.state.message, name: this.state.name}))\r\n        \r\n        this.setState({ //empty the message after sending\r\n            message: ''\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.state.socket.on('NewMessage', (data) => { //set up a new message \r\n            let prevState = this.state.messages //intialize temp var for the messages\r\n            \r\n            prevState.push(data) //push data to new var\r\n            \r\n            this.setState({ //set messages to new var\r\n                messages: prevState\r\n            })\r\n        })\r\n    }\r\n\r\n    render(){ //render class for the app\r\n        if(!this.state.isLoggedIn){\r\n            let messagesOnStart = []\r\n            this.state.socket.emit('LogIn', (response) => { //when not logged in will send LogIn to get user set into a chat room\r\n                console.log(response.messages)\r\n                messagesOnStart = response.messages\r\n                this.setState({\r\n                    isLoggedIn: true,\r\n                    messages: messagesOnStart,\r\n                    roomNum: response.roomNum\r\n                })\r\n            })\r\n        }\r\n\r\n        console.log(this.state.messages)\r\n        let messages = <Message name = {this.state.name} messages = {this.state.messages}></Message> //create message component\r\n\r\n        //return the messages as well as the ways to send a message\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\"> Room Number: {this.state.roomNum}\r\n                </header>\r\n                    <div>\r\n                        {messages}\r\n                        <div>\r\n                            <input value = {this.state.message} onChange={this.InputOnChange} type=\"text\" placeholder=\"Enter Username\" name=\"username\" />\r\n                            <button className = 'entry' onClick = {() => this.SendMessage()}>Send</button> \r\n                        </div>\r\n                </div>\r\n            </div>\r\n        );  \r\n    }\r\n}\r\n\r\nexport default App;\r\n",{"ruleId":"24","severity":1,"message":"25","line":40,"column":23,"nodeType":"26","messageId":"27","endLine":40,"endColumn":34},"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral"]