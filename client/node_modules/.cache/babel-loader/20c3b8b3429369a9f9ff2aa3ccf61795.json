{"ast":null,"code":"import _classCallCheck from\"C:/Users/Magnus Reeves/Desktop/3313/SE-3313-project-2/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/Magnus Reeves/Desktop/3313/SE-3313-project-2/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:/Users/Magnus Reeves/Desktop/3313/SE-3313-project-2/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:/Users/Magnus Reeves/Desktop/3313/SE-3313-project-2/client/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/Magnus Reeves/Desktop/3313/SE-3313-project-2/client/node_modules/@babel/runtime/helpers/esm/createSuper\";import'./App.css';import React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Message(props){//function for the client message\nvar messagesHTML=[];console.log(props.messages);for(var j=0;j<props.messages.length;j++){var containerCss=void 0;if(props.messages[j].name===props.name){//what side the message is on\ncontainerCss=\"containerLeft\";}else{containerCss=\"containerRight\";}//defining the HTML for the message\nmessagesHTML[j]=/*#__PURE__*/_jsx(\"div\",{className:containerCss,children:/*#__PURE__*/_jsxs(\"div\",{className:\"message\",children:[/*#__PURE__*/_jsx(\"p\",{children:props.messages[j].message}),/*#__PURE__*/_jsxs(\"span\",{className:\"UserName\",children:[\" \",props.messages[j].name,\" \"]})]})});}//return the message\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"board\",children:messagesHTML});}var App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);var _super=_createSuper(App);function App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);_this.state={//defines the current state\nsocket:props.socket,messages:new Array(),isLoggedIn:false,message:'',name:props.data.name,roomNum:null};console.log(_this.state.messages);_this.SendMessage=_this.SendMessage.bind(_assertThisInitialized(_this));_this.InputOnChange=_this.InputOnChange.bind(_assertThisInitialized(_this));return _this;}_createClass(App,[{key:\"InputOnChange\",value:function InputOnChange(event){//set message to the event value\nthis.setState({message:event.target.value});}},{key:\"SendMessage\",value:function SendMessage(){//send the message with the required values in the state\nconsole.log(\"sending message\");this.state.socket.emit('SendMessage',{message:this.state.message,name:this.state.name});this.setState({//empty the message after sending\nmessage:''});}},{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.state.socket.on('NewMessage',function(data){//set up a new message \nvar prevState=_this2.state.messages;//intialize temp var for the messages\nprevState.push(data);//push data to new var\n_this2.setState({//set messages to new var\nmessages:prevState});});}},{key:\"render\",value:function render(){var _this3=this;//render class for the app\nif(!this.state.isLoggedIn){var messagesOnStart=[];this.state.socket.emit('LogIn',function(response){//when not logged in will send LogIn to get user set into a chat room\nconsole.log(response.messages);messagesOnStart=response.messages;_this3.setState({isLoggedIn:true,messages:messagesOnStart,roomNum:response.roomNum});});}console.log(this.state.messages);var messages=/*#__PURE__*/_jsx(Message,{name:this.state.name,messages:this.state.messages});//create message component\n//return the messages as well as the ways to send a message\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"App-header\",children:[\" Room Number: \",this.state.roomNum]}),/*#__PURE__*/_jsxs(\"div\",{children:[messages,/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{value:this.state.message,onChange:this.InputOnChange,type:\"text\",placeholder:\"Enter Username\",name:\"username\"}),/*#__PURE__*/_jsx(\"button\",{className:\"entry\",onClick:function onClick(){return _this3.SendMessage();},children:\"Send\"})]})]})]});}}]);return App;}(React.Component);export default App;","map":{"version":3,"sources":["C:/Users/Magnus Reeves/Desktop/3313/SE-3313-project-2/client/src/App.js"],"names":["React","Message","props","messagesHTML","console","log","messages","j","length","containerCss","name","message","App","state","socket","Array","isLoggedIn","data","roomNum","SendMessage","bind","InputOnChange","event","setState","target","value","emit","on","prevState","push","messagesOnStart","response","Component"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport React from 'react';\r\n\r\nfunction Message(props){ //function for the client message\r\n    let messagesHTML = []; \r\n    console.log(props.messages)\r\n    for(let j = 0; j < props.messages.length; j++){ \r\n        let containerCss;\r\n\r\n        if(props.messages[j].name === props.name){ //what side the message is on\r\n            containerCss = \"containerLeft\"\r\n        }\r\n        else{\r\n            containerCss = \"containerRight\"\r\n        }\r\n\r\n        //defining the HTML for the message\r\n        messagesHTML[j] = <div className = {containerCss}>\r\n                            <div className = \"message\">\r\n                                <p>{props.messages[j].message}</p>\r\n                                <span className = \"UserName\"> {props.messages[j].name} </span>\r\n                            </div>\r\n                    </div>\r\n    }\r\n    \r\n    //return the message\r\n    return (<div className = \"board\"> \r\n               {messagesHTML}\r\n           </div> \r\n    )\r\n}\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        \r\n        this.state = { //defines the current state\r\n            socket: props.socket,\r\n            messages: new Array(),\r\n            isLoggedIn: false,\r\n            message: '',\r\n            name: props.data.name,\r\n            roomNum: null\r\n        }\r\n\r\n        console.log(this.state.messages)\r\n\r\n        this.SendMessage = this.SendMessage.bind(this)\r\n        this.InputOnChange = this.InputOnChange.bind(this)\r\n    }\r\n\r\n    InputOnChange(event){ //set message to the event value\r\n        this.setState({\r\n            message: event.target.value,\r\n        })     \r\n    }\r\n\r\n    SendMessage(){ //send the message with the required values in the state\r\n        console.log(\"sending message\")\r\n        this.state.socket.emit('SendMessage', ({message: this.state.message, name: this.state.name}))\r\n        \r\n        this.setState({ //empty the message after sending\r\n            message: ''\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.state.socket.on('NewMessage', (data) => { //set up a new message \r\n            let prevState = this.state.messages //intialize temp var for the messages\r\n            \r\n            prevState.push(data) //push data to new var\r\n            \r\n            this.setState({ //set messages to new var\r\n                messages: prevState\r\n            })\r\n        })\r\n    }\r\n\r\n    render(){ //render class for the app\r\n        if(!this.state.isLoggedIn){\r\n            let messagesOnStart = []\r\n            this.state.socket.emit('LogIn', (response) => { //when not logged in will send LogIn to get user set into a chat room\r\n                console.log(response.messages)\r\n                messagesOnStart = response.messages\r\n                this.setState({\r\n                    isLoggedIn: true,\r\n                    messages: messagesOnStart,\r\n                    roomNum: response.roomNum\r\n                })\r\n            })\r\n        }\r\n\r\n        console.log(this.state.messages)\r\n        let messages = <Message name = {this.state.name} messages = {this.state.messages}></Message> //create message component\r\n\r\n        //return the messages as well as the ways to send a message\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\"> Room Number: {this.state.roomNum}\r\n                </header>\r\n                    <div>\r\n                        {messages}\r\n                        <div>\r\n                            <input value = {this.state.message} onChange={this.InputOnChange} type=\"text\" placeholder=\"Enter Username\" name=\"username\" />\r\n                            <button className = 'entry' onClick = {() => this.SendMessage()}>Send</button> \r\n                        </div>\r\n                </div>\r\n            </div>\r\n        );  \r\n    }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}