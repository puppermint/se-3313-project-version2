{"version":3,"sources":["LogIn.js","App.js","Home.js","reportWebVitals.js","index.js"],"names":["LogIn","props","state","name","selectedRoom","setName","loggedIn","socket","room","handleChange","bind","logIn","this","setState","event","target","value","className","onClick","to","class","onChange","type","placeholder","Component","Message","messagesHTML","console","log","messages","j","length","containerCss","message","App","Array","isLoggedIn","data","roomNum","SendMessage","InputOnChange","emit","on","prevState","push","messagesOnStart","response","React","Home","io","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2912083.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass LogIn extends Component{ //creating the LogIn component\r\n    constructor(props){\r\n        super(props);\r\n        //setting up initial state\r\n        this.state = {\r\n            name: '',\r\n            selectedRoom: null,\r\n            setName: props.setName,\r\n            loggedIn: false,\r\n            socket: props.socket,\r\n            room: null\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.logIn = this.logIn.bind(this);\r\n    }\r\n\r\n\r\n    logIn(){ //sets name to the state name and mark client as logged in\r\n        this.state.setName({name: this.state.name})\r\n        this.setState({\r\n            loggedIn: true\r\n        })\r\n    }\r\n\r\n    handleChange(event) { //change name state to event value\r\n        this.setState({\r\n            name: event.target.value,\r\n        })  \r\n    }\r\n\r\n    handleChangeRoom(event) {\r\n        this.setState({\r\n            name: event.target.value,\r\n        })  \r\n    }\r\n    \r\n    render(){ //creating the render\r\n        let logIn = <button className = 'entry' onClick = {() => this.logIn()}>LogIn</button> //creating log in button\r\n \r\n        if(this.state.loggedIn){ //if user is logged in then the button will link to the App page\r\n            logIn = <Link to ='/App'> LOGIN</Link>\r\n        }\r\n\r\n        //returns the html for the login page\r\n        return(\r\n            <div class = 'container'>\r\n                <h1> Log In Type </h1>\r\n                <div>\r\n                    <ul>\r\n                        <label>Username : </label>   \r\n                        <input value = {this.state.name} onChange={this.handleChange} type=\"text\" placeholder=\"Enter Username\" name=\"username\" />  \r\n                    </ul>\r\n                    {logIn}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default LogIn;","import './App.css';\r\nimport React from 'react';\r\n\r\nfunction Message(props){ //function for the client message\r\n    let messagesHTML = []; \r\n    console.log(props.messages)\r\n    for(let j = 0; j < props.messages.length; j++){ \r\n        let containerCss;\r\n\r\n        if(props.messages[j].name === props.name){ //what side the message is on\r\n            containerCss = \"containerLeft\"\r\n        }\r\n        else{\r\n            containerCss = \"containerRight\"\r\n        }\r\n\r\n        //defining the HTML for the message\r\n        messagesHTML[j] = <div className = {containerCss}>\r\n                            <div className = \"message\">\r\n                                <p>{props.messages[j].message}</p>\r\n                                <span className = \"UserName\"> {props.messages[j].name} </span>\r\n                            </div>\r\n                    </div>\r\n    }\r\n    \r\n    //return the message\r\n    return (<div className = \"board\"> \r\n               {messagesHTML}\r\n           </div> \r\n    )\r\n}\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        \r\n        this.state = { //defines the current state\r\n            socket: props.socket,\r\n            messages: new Array(),\r\n            isLoggedIn: false,\r\n            message: '',\r\n            name: props.data.name,\r\n            roomNum: null\r\n        }\r\n\r\n        console.log(this.state.messages)\r\n\r\n        this.SendMessage = this.SendMessage.bind(this)\r\n        this.InputOnChange = this.InputOnChange.bind(this)\r\n    }\r\n\r\n    InputOnChange(event){ //set message to the event value\r\n        this.setState({\r\n            message: event.target.value,\r\n        })     \r\n    }\r\n\r\n    SendMessage(){ //send the message with the required values in the state\r\n        console.log(\"sending message\")\r\n        this.state.socket.emit('SendMessage', ({message: this.state.message, name: this.state.name}))\r\n        \r\n        this.setState({ //empty the message after sending\r\n            message: ''\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.state.socket.on('NewMessage', (data) => { //set up a new message \r\n            let prevState = this.state.messages //intialize temp var for the messages\r\n            \r\n            prevState.push(data) //push data to new var\r\n            \r\n            this.setState({ //set messages to new var\r\n                messages: prevState\r\n            })\r\n        })\r\n    }\r\n\r\n    render(){ //render class for the app\r\n        if(!this.state.isLoggedIn){\r\n            let messagesOnStart = []\r\n            this.state.socket.emit('LogIn', (response) => { //when not logged in will send LogIn to get user set into a chat room\r\n                console.log(response.messages)\r\n                messagesOnStart = response.messages\r\n                this.setState({\r\n                    isLoggedIn: true,\r\n                    messages: messagesOnStart,\r\n                    roomNum: response.roomNum\r\n                })\r\n            })\r\n        }\r\n\r\n        console.log(this.state.messages)\r\n        let messages = <Message name = {this.state.name} messages = {this.state.messages}></Message> //create message component\r\n\r\n        //return the messages as well as the ways to send a message\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\"> Room Number: {this.state.roomNum}\r\n                </header>\r\n                    <div>\r\n                        {messages}\r\n                        <div>\r\n                            <input value = {this.state.message} onChange={this.InputOnChange} type=\"text\" placeholder=\"Enter Username\" name=\"username\" />\r\n                            <button className = 'entry' onClick = {() => this.SendMessage()}>Send</button> \r\n                        </div>\r\n                </div>\r\n            </div>\r\n        );  \r\n    }\r\n}\r\n\r\nexport default App;\r\n","import './App.css';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport React from 'react';\r\nimport LogIn from './LogIn';\r\nimport App from './App';\r\nimport io from \"socket.io-client\";\r\nconst ENDPOINT = \"99.243.107.19:80\";\r\n\r\nclass Home extends React.Component { //creating Home component\r\n    constructor(props){\r\n        super(props)\r\n\r\n        let socket = io(ENDPOINT) //setup socket to ENDPOINT\r\n\r\n        this.state = { //define the initial state\r\n            data: null,\r\n            socket: socket\r\n        }\r\n    }\r\n    \r\n    //setName is defined as a function that sets data state to the reveived data\r\n    setName = (data) => {\r\n        this.setState({\r\n            data: data\r\n        })\r\n    }\r\n    \r\n    render(){ //return the Components used in building the home page\r\n        return (\r\n            <Router>\r\n                <Switch> \r\n                    <Route exact path='/'>\r\n                        <LogIn socket = {this.state.socket} setName = {this.setName}/>\r\n                    </Route>\r\n                    <Route exact path='/App'>\r\n                        <App socket = {this.state.socket} data = {this.state.data}/>\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        )    \r\n    }\r\n}\r\nexport default Home;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './Home';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}